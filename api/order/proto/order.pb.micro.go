// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto1 "github.com/klaus01/GoMicro_LBSServer/srv/order/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderAPI service

type OrderAPIService interface {
	Get(ctx context.Context, in *proto1.GetRequest, opts ...client.CallOption) (*proto1.OrderModel, error)
	Search(ctx context.Context, in *proto1.SearchRequest, opts ...client.CallOption) (*proto1.SearchResult, error)
	Create(ctx context.Context, in *APICreateRequest, opts ...client.CallOption) (*proto1.CreateResult, error)
	SetDeliveryInfo(ctx context.Context, in *proto1.SetDeliveryInfoRequest, opts ...client.CallOption) (*empty.Empty, error)
}

type orderAPIService struct {
	c    client.Client
	name string
}

func NewOrderAPIService(name string, c client.Client) OrderAPIService {
	return &orderAPIService{
		c:    c,
		name: name,
	}
}

func (c *orderAPIService) Get(ctx context.Context, in *proto1.GetRequest, opts ...client.CallOption) (*proto1.OrderModel, error) {
	req := c.c.NewRequest(c.name, "OrderAPI.Get", in)
	out := new(proto1.OrderModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIService) Search(ctx context.Context, in *proto1.SearchRequest, opts ...client.CallOption) (*proto1.SearchResult, error) {
	req := c.c.NewRequest(c.name, "OrderAPI.Search", in)
	out := new(proto1.SearchResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIService) Create(ctx context.Context, in *APICreateRequest, opts ...client.CallOption) (*proto1.CreateResult, error) {
	req := c.c.NewRequest(c.name, "OrderAPI.Create", in)
	out := new(proto1.CreateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIService) SetDeliveryInfo(ctx context.Context, in *proto1.SetDeliveryInfoRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "OrderAPI.SetDeliveryInfo", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderAPI service

type OrderAPIHandler interface {
	Get(context.Context, *proto1.GetRequest, *proto1.OrderModel) error
	Search(context.Context, *proto1.SearchRequest, *proto1.SearchResult) error
	Create(context.Context, *APICreateRequest, *proto1.CreateResult) error
	SetDeliveryInfo(context.Context, *proto1.SetDeliveryInfoRequest, *empty.Empty) error
}

func RegisterOrderAPIHandler(s server.Server, hdlr OrderAPIHandler, opts ...server.HandlerOption) error {
	type orderAPI interface {
		Get(ctx context.Context, in *proto1.GetRequest, out *proto1.OrderModel) error
		Search(ctx context.Context, in *proto1.SearchRequest, out *proto1.SearchResult) error
		Create(ctx context.Context, in *APICreateRequest, out *proto1.CreateResult) error
		SetDeliveryInfo(ctx context.Context, in *proto1.SetDeliveryInfoRequest, out *empty.Empty) error
	}
	type OrderAPI struct {
		orderAPI
	}
	h := &orderAPIHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderAPI{h}, opts...))
}

type orderAPIHandler struct {
	OrderAPIHandler
}

func (h *orderAPIHandler) Get(ctx context.Context, in *proto1.GetRequest, out *proto1.OrderModel) error {
	return h.OrderAPIHandler.Get(ctx, in, out)
}

func (h *orderAPIHandler) Search(ctx context.Context, in *proto1.SearchRequest, out *proto1.SearchResult) error {
	return h.OrderAPIHandler.Search(ctx, in, out)
}

func (h *orderAPIHandler) Create(ctx context.Context, in *APICreateRequest, out *proto1.CreateResult) error {
	return h.OrderAPIHandler.Create(ctx, in, out)
}

func (h *orderAPIHandler) SetDeliveryInfo(ctx context.Context, in *proto1.SetDeliveryInfoRequest, out *empty.Empty) error {
	return h.OrderAPIHandler.SetDeliveryInfo(ctx, in, out)
}
