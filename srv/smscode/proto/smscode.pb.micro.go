// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/smscode/proto/smscode.proto

package smscode

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Smscode service

type SmscodeService interface {
	CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...client.CallOption) (*CreateVerificationCodeResult, error)
	CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...client.CallOption) (*CheckVerificationCodeResult, error)
}

type smscodeService struct {
	c    client.Client
	name string
}

func NewSmscodeService(name string, c client.Client) SmscodeService {
	return &smscodeService{
		c:    c,
		name: name,
	}
}

func (c *smscodeService) CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...client.CallOption) (*CreateVerificationCodeResult, error) {
	req := c.c.NewRequest(c.name, "Smscode.CreateVerificationCode", in)
	out := new(CreateVerificationCodeResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smscodeService) CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...client.CallOption) (*CheckVerificationCodeResult, error) {
	req := c.c.NewRequest(c.name, "Smscode.CheckVerificationCode", in)
	out := new(CheckVerificationCodeResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Smscode service

type SmscodeHandler interface {
	CreateVerificationCode(context.Context, *CreateVerificationCodeRequest, *CreateVerificationCodeResult) error
	CheckVerificationCode(context.Context, *CheckVerificationCodeRequest, *CheckVerificationCodeResult) error
}

func RegisterSmscodeHandler(s server.Server, hdlr SmscodeHandler, opts ...server.HandlerOption) error {
	type smscode interface {
		CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, out *CreateVerificationCodeResult) error
		CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, out *CheckVerificationCodeResult) error
	}
	type Smscode struct {
		smscode
	}
	h := &smscodeHandler{hdlr}
	return s.Handle(s.NewHandler(&Smscode{h}, opts...))
}

type smscodeHandler struct {
	SmscodeHandler
}

func (h *smscodeHandler) CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, out *CreateVerificationCodeResult) error {
	return h.SmscodeHandler.CreateVerificationCode(ctx, in, out)
}

func (h *smscodeHandler) CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, out *CheckVerificationCodeResult) error {
	return h.SmscodeHandler.CheckVerificationCode(ctx, in, out)
}
