// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/yuntongxun/proto/yuntongxun.proto

package yuntongxun

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Yuntongxun service

type YuntongxunService interface {
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*empty.Empty, error)
	SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*empty.Empty, error)
	SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, opts ...client.CallOption) (*empty.Empty, error)
}

type yuntongxunService struct {
	c    client.Client
	name string
}

func NewYuntongxunService(name string, c client.Client) YuntongxunService {
	return &yuntongxunService{
		c:    c,
		name: name,
	}
}

func (c *yuntongxunService) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Yuntongxun.SendVerificationCode", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuntongxunService) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Yuntongxun.SendOrderConfirmation", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuntongxunService) SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Yuntongxun.SendShippingNotice", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Yuntongxun service

type YuntongxunHandler interface {
	SendVerificationCode(context.Context, *SendVerificationCodeRequest, *empty.Empty) error
	SendOrderConfirmation(context.Context, *SendOrderConfirmationRequest, *empty.Empty) error
	SendShippingNotice(context.Context, *SendShippingNoticeRequest, *empty.Empty) error
}

func RegisterYuntongxunHandler(s server.Server, hdlr YuntongxunHandler, opts ...server.HandlerOption) error {
	type yuntongxun interface {
		SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *empty.Empty) error
		SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *empty.Empty) error
		SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, out *empty.Empty) error
	}
	type Yuntongxun struct {
		yuntongxun
	}
	h := &yuntongxunHandler{hdlr}
	return s.Handle(s.NewHandler(&Yuntongxun{h}, opts...))
}

type yuntongxunHandler struct {
	YuntongxunHandler
}

func (h *yuntongxunHandler) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *empty.Empty) error {
	return h.YuntongxunHandler.SendVerificationCode(ctx, in, out)
}

func (h *yuntongxunHandler) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *empty.Empty) error {
	return h.YuntongxunHandler.SendOrderConfirmation(ctx, in, out)
}

func (h *yuntongxunHandler) SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, out *empty.Empty) error {
	return h.YuntongxunHandler.SendShippingNotice(ctx, in, out)
}
