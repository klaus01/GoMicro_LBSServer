// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/sms/proto/sms.proto

package sms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sms service

type SmsService interface {
	CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...client.CallOption) (*CreateVerificationCodeResult, error)
	CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...client.CallOption) (*CheckVerificationCodeResult, error)
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*empty.Empty, error)
	SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*empty.Empty, error)
	SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, opts ...client.CallOption) (*empty.Empty, error)
}

type smsService struct {
	c    client.Client
	name string
}

func NewSmsService(name string, c client.Client) SmsService {
	return &smsService{
		c:    c,
		name: name,
	}
}

func (c *smsService) CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...client.CallOption) (*CreateVerificationCodeResult, error) {
	req := c.c.NewRequest(c.name, "Sms.CreateVerificationCode", in)
	out := new(CreateVerificationCodeResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...client.CallOption) (*CheckVerificationCodeResult, error) {
	req := c.c.NewRequest(c.name, "Sms.CheckVerificationCode", in)
	out := new(CheckVerificationCodeResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Sms.SendVerificationCode", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Sms.SendOrderConfirmation", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Sms.SendShippingNotice", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sms service

type SmsHandler interface {
	CreateVerificationCode(context.Context, *CreateVerificationCodeRequest, *CreateVerificationCodeResult) error
	CheckVerificationCode(context.Context, *CheckVerificationCodeRequest, *CheckVerificationCodeResult) error
	SendVerificationCode(context.Context, *SendVerificationCodeRequest, *empty.Empty) error
	SendOrderConfirmation(context.Context, *SendOrderConfirmationRequest, *empty.Empty) error
	SendShippingNotice(context.Context, *SendShippingNoticeRequest, *empty.Empty) error
}

func RegisterSmsHandler(s server.Server, hdlr SmsHandler, opts ...server.HandlerOption) error {
	type sms interface {
		CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, out *CreateVerificationCodeResult) error
		CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, out *CheckVerificationCodeResult) error
		SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *empty.Empty) error
		SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *empty.Empty) error
		SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, out *empty.Empty) error
	}
	type Sms struct {
		sms
	}
	h := &smsHandler{hdlr}
	return s.Handle(s.NewHandler(&Sms{h}, opts...))
}

type smsHandler struct {
	SmsHandler
}

func (h *smsHandler) CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, out *CreateVerificationCodeResult) error {
	return h.SmsHandler.CreateVerificationCode(ctx, in, out)
}

func (h *smsHandler) CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, out *CheckVerificationCodeResult) error {
	return h.SmsHandler.CheckVerificationCode(ctx, in, out)
}

func (h *smsHandler) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, out *empty.Empty) error {
	return h.SmsHandler.SendVerificationCode(ctx, in, out)
}

func (h *smsHandler) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *empty.Empty) error {
	return h.SmsHandler.SendOrderConfirmation(ctx, in, out)
}

func (h *smsHandler) SendShippingNotice(ctx context.Context, in *SendShippingNoticeRequest, out *empty.Empty) error {
	return h.SmsHandler.SendShippingNotice(ctx, in, out)
}
